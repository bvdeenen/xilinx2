; **************************************************************************************
; Port definitions
; **************************************************************************************
; 
; 
; LCD interface ports
; 
; The 8-bit communication interface can be used on the Spartan-3A Starter Kit
; as all pins are connected and dedicated.
; 
LCD_output_port     EQU       64                  ; LCD character module output data
LCD_input_port      EQU       1                   ; LCD character module input data

LCD_control_port    EQU       32                  ; LCD character module control signals
LCD_E               EQU       1                   ; active High Enable        E - bit0

READ_POS_ADDR       EQU       4                   ; Output data from the DNA primitive

ORG $000
; 
; 
; **************************************************************************************
; Special Register usage
; **************************************************************************************
; 
; No registers are given special names in this program.
; 
; **************************************************************************************
; Scratch Pad Memory Locations
; **************************************************************************************
; 
; 
ISR_preserve_s0     EQU       0                   ; Preserve s0 contents during ISR

POS                 EQU       16                  ; byte value of pos signal in xilinx2.vhd
POS_prev            EQU       33                  ; previous isr pos value
; 
semaphore           EQU       32                  ; isr semaphore
; 
; **************************************************************************************
; Useful data constants
; **************************************************************************************
; 
; 
; Constant to define a software delay of 1us. This must be adjusted to reflect the
; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
; calculation highly predictable. The '6' in the following equation even allows for
; 'CALL delay_1us' instruction in the initiating code.
; 
; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
; 
; Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
; For clock rates below 10MHz the value of 1 must be used and the operation will
; become lower than intended. Interrupts may effect the timing of software based
; delays.
; 
delay_1us_constant  EQU       11

.SCR    0, 256

welcome .TXT "Hi there"

; 
; 
; 
; **************************************************************************************
; Initialise the system
; **************************************************************************************
; 
cold_start:         LOAD      s0, 0               ; clear 1 second counter and clear LEDs
                    STORE     s0, semaphore
; 
                    EINT                          ; enable one second heart beat
; 
                    CALL      LCD_reset           ; initialise LCD display
; 
; **************************************************************************************
; Main program
; **************************************************************************************
; 
; Display welcome message for design
; 
main_program:       LOAD      s5, $10              ; Line 1 position 0
                    CALL      LCD_cursor
                    LOAD      s2, welcome

                    LOAD      sA, 10
loop:               LOAD      s5,sA
                    ADD       s5, $40
                    CALL      LCD_write_data
                    SUB       sA, 1
                    JUMP      NZ, loop


                    
main_loop: 
                    FETCH     s0, semaphore
                    COMP      s0, 1
                    JUMP      Z, continue

                    CALL      read_device_DNA     ; read device DNA into scratch pad memory

                    FETCH     s0, POS
                    FETCH     s1, POS_prev
                    COMP      s0, s1
                    JUMP      Z, continue
                    STORE     s0, POS_prev

                    CALL      disp_DNA_value      ; display DNA value

continue:           CALL      delay_1ms           ; software delay to ensure heart beat counter has advanced
                    LOAD      s0, 0
                    STORE     s0, semaphore
                    JUMP      main_loop           ; repeat read operation to facilitate probing of signals

read_device_DNA: 
                    IN        s1, READ_POS_ADDR   ; read data bit
                    ADD       s1, $71
                    STORE     s1, POS
                    RET       

disp_DNA_value: 
                    LOAD      s5, 32              ; Line 2 position 0
                    CALL      LCD_cursor
                    FETCH     s0, POS
                    CALL      hex_byte_to_ASCII   ; convert value to ASCII characters in s3 and s2.
                    LOAD      s8, s2              ; remember second character
                    LOAD      s5, s3              ; display upper nibble character
                    CALL      LCD_write_data
                    LOAD      s5, s8              ; display lower nibble character
                    CALL      LCD_write_data
                    RET       

; 
; 
; 
; 
; **************************************************************************************
; Routines to display hexadecimal values on LCD display
; **************************************************************************************
; 
; 
; Convert hexadecimal value provided in register s0 into ASCII characters
; 
; The value provided must can be any value in the range 00 to FF and will be converted into
; two ASCII characters.
; The upper nibble will be represented by an ASCII character returned in register s3.
; The lower nibble will be represented by an ASCII character returned in register s2.
; 
; The ASCII representations of '0' to '9' are 30 to 39 hexadecimal which is simply 30 hex
; added to the actual decimal value. The ASCII representations of 'A' to 'F' are 41 to 46
; hexadecimal requiring a further addition of 07 to the 30 already added.
; 
; Registers used s0, s2 and s3.
; 
hex_byte_to_ASCII:  LOAD      s2, s0              ; remember value supplied
                    SR0       s0                  ; isolate upper nibble
                    SR0       s0
                    SR0       s0
                    SR0       s0
                    CALL      hex_to_ASCII        ; convert
                    LOAD      s3, s0              ; upper nibble value in s3
                    LOAD      s0, s2              ; restore complete value
                    AND       s0, 15              ; isolate lower nibble
                    CALL      hex_to_ASCII        ; convert
                    LOAD      s2, s0              ; lower nibble value in s2
                    RET       
; 
; Convert hexadecimal value provided in register s0 into ASCII character
; 
; Register used s0
; 
hex_to_ASCII:       SUB       s0, 10              ; test if value is in range 0 to 9
                    JUMP      C, number_char
                    ADD       s0, 7               ; ASCII char A to F in range 41 to 46
number_char:        ADD       s0, 58              ; ASCII char 0 to 9 in range 30 to 40
                    RET       
; 
; 
; Display the two character HEX value of the register contents 's0' on the LCD
; at the current cursor position.
; 
; Registers used s0, s1, s2, s3, s4, s5
; 
display_hex_byte:   CALL      hex_byte_to_ASCII
                    LOAD      s5, s3
                    CALL      LCD_write_data
                    LOAD      s5, s2
                    CALL      LCD_write_data
                    RET       
; 
; 
; 
; Display the 32-bit value stored in 4 ascending memory locations as an 8 character
; HEX value at the current cursor position. Register s7 must contain the memory
; location of the most significant byte (which is also the highest address).
; 
; Registers used s0, s1, s2, s3, s4, s5, s6, s7
; 
display_hex_32_bit: LOAD      s6, 4               ; 4 bytes to display
disp32_loop:        FETCH     s0, ( s7 )          ; read byte
                    CALL      display_hex_byte    ; display byte
                    SUB       s7, 1               ; decrement pointer
                    SUB       s6, 1               ; count bytes displayed
                    RET       Z
                    JUMP      disp32_loop
; 
; 
; **************************************************************************************
; LCD text messages
; **************************************************************************************
; 
; 
; 
; Display a space on LCD at current cursor position
; 
disp_space:         LOAD      s5, 32
                    CALL      LCD_write_data
                    RET       
; 
; 
; **************************************************************************************
; Software delay routines
; **************************************************************************************
; 
; Delay of 1us.
; 
; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
; instruction executes in 2 clock cycles making the calculation highly predictable.
; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
; in the initiating code. Interrupts may effect software derived delays.
; 
; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
; 
; Registers used s0
; 
delay_1us:          LOAD      s0, delay_1us_constant
wait_1us:           SUB       s0, 1
                    JUMP      NZ, wait_1us
                    RET       
; 
; Delay of 40us.
; 
; Registers used s0, s1
; 
delay_40us:         LOAD      s1, 40              ; 40 x 1us = 40us
wait_40us:          CALL      delay_1us
                    SUB       s1, 1
                    JUMP      NZ, wait_40us
                    RET       
; 
; 
; Delay of 1ms.
; 
; Registers used s0, s1, s2
; 
delay_1ms:          LOAD      s2, 25              ; 25 x 40us = 1ms
wait_1ms:           CALL      delay_40us
                    SUB       s2, 1
                    JUMP      NZ, wait_1ms
                    RET       
; 
; Delay of 20ms.
; 
; Delay of 20ms used during initialisation.
; 
; Registers used s0, s1, s2, s3
; 
delay_20ms:         LOAD      s3, 20              ; 20 x 1ms = 20ms
wait_20ms:          CALL      delay_1ms
                    SUB       s3, 1
                    JUMP      NZ, wait_20ms
                    RET       
; 
; Delay of approximately 1 second.
; 
; Registers used s0, s1, s2, s3, s4
; 
delay_1s:           LOAD      s4, 50              ; 50 x 20ms = 1000ms
wait_1s:            CALL      delay_20ms
                    SUB       s4, 1
                    JUMP      NZ, wait_1s
                    RET       
; 
; 
; 
; **************************************************************************************
; LCD Character Module Routines
; **************************************************************************************
; 
; LCD module is a 16 character by 2 line display but all displays are very similar
; On the Spartan-3A Starter Kit the 8-wire data interface can be used.
; 
; The LCD modules are relatively slow and software delay loops are used to slow down
; KCPSM3 adequately for the LCD to communicate. The delay routines are provided in
; a different section (see above in this case).
; 
; 
; 
; Write 8-bit instruction to LCD display.
; 
; The 8-bit instruction should be provided in register s5.
; After writing there is a delay >40us to allow time for the LCD process the instruction.
; 
; Registers used s0,s1,s4,s5
; 
LCD_write_inst:     OUT       s5, LCD_output_port ; data output
                    LOAD      s4, 0               ; RS=0 Instruction, RW=0 Write, E=0
                    OUT       s4, LCD_control_port
                    CALL      LCD_pulse_E
                    CALL      delay_40us          ; wait >40us
                    RET       
; 
; 
; 
; 
; Write 8-bit data to LCD display.
; 
; The 8-bit data should be provided in register s5.
; After writing there is a delay >40us to allow time for the LCD process the data.
; 
; Registers used s0,s1,s4,s5
; 
LCD_write_data:     OUT       s5, LCD_output_port ; data output
                    LOAD      s4, 4               ; RS=1 Data, RW=0 Write, E=0
                    OUT       s4, LCD_control_port
                    CALL      LCD_pulse_E
                    CALL      delay_40us          ; wait >40us
                    RET       
; 
; 
; 
; 
; Read 8-bit data from LCD display.
; 
; The 8-bit data will be read from the current LCD memory address
; and will be returned in register s5.
; It is advisable to set the LCD address (cursor position) before
; using the data read for the first time otherwise the display may
; generate invalid data on the first read.
; 
; A delay of >40us is required after each read
; 
; Registers used s0,s1,s4,s5
; 
LCD_read_data:      LOAD      s4, 6               ; RS=1 Data, RW=1 Read, E=0
                    OUT       s4, LCD_control_port; set up RS and RW >40ns before enable pulse
                    XOR       s4, LCD_E           ; E=1
                    OUT       s4, LCD_control_port
                    CALL      delay_1us           ; wait >260ns to access data
                    IN        s5, LCD_input_port  ; read data
                    XOR       s4, LCD_E           ; E=0
                    OUT       s4, LCD_control_port
                    LOAD      s4, 4               ; RS=1 Data, RW=0 Write, E=0
                    OUT       s4, LCD_control_port; Stop reading 5V device
                    CALL      delay_40us          ; wait >40us
                    RET       
; 
; 
; Pulse LCD enable signal 'E' high for greater than 230ns (1us is used).
; 
; Register s4 should define the current state of the LCD control port.
; 
; Registers used s0, s4
; 
LCD_pulse_E:        XOR       s4, LCD_E           ; E=1
                    OUT       s4, LCD_control_port
                    CALL      delay_1us
                    XOR       s4, LCD_E           ; E=0
                    OUT       s4, LCD_control_port
                    RET       
; 
; 
; 
; Reset and initialise display to communicate using 8-bit data mode
; Includes routine to clear the display.
; 
; Requires the 8-bit instructions 38,38,38,28 to be sent with suitable delays
; following by the 8-bit instructions to set up the display.
; 
; 38 = '001' Function set, '1' 4-bit mode, '1' 2-line, '0' 5x7 dot matrix, 'xx'
; 06 = '000001' Entry mode, '1' increment, '0' no display shift
; 0C = '00001' Display control, '1' display on, '0' cursor off, '0' cursor blink off
; 01 = '00000001' Display clear
; 
; Registers used s0, s1, s2, s3, s4
; 
LCD_reset:          CALL      delay_20ms          ; wait more that 15ms for display to be ready
                    LOAD      s5, 56              ; Function set
                    CALL      LCD_write_inst      ; write '38'
                    CALL      delay_20ms          ; wait >4.1ms
                    CALL      LCD_write_inst      ; write '38'
                    CALL      delay_1ms           ; wait >100us
                    CALL      LCD_write_inst      ; write '38' and wait >40us
                    CALL      LCD_write_inst      ; write 'Function Set' and wait >40us
                    LOAD      s5, 6               ; Entry mode
                    CALL      LCD_write_inst      ; write 'Entry mode' and wait >40us
                    LOAD      s5, 12              ; Display control
                    CALL      LCD_write_inst      ; write 'Display control' and wait >40us
LCD_clear:          LOAD      s5, 1               ; Display clear
                    CALL      LCD_write_inst
                    CALL      delay_1ms           ; wait >1.64ms for display to clear
                    CALL      delay_1ms
                    RET       
; 
; 
; 
; 
; Position the cursor ready for characters to be written.
; The display is formed of 2 lines of 16 characters and each
; position has a corresponding address as indicated below.
; 
; Character position
; 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15
; 
; Line 1 - 80 81 82 83 84 85 86 87 88 89 8A 8B 8C 8D 8E 8F
; Line 2 - C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF
; 
; This routine will set the cursor position using the value provided
; in register s5. The upper nibble will define the line and the lower
; nibble the character position on the line.
; Example s5 = 2B will position the cursor on line 2 position 11
; 
; Registers used s0, s1, s2, s3, s4
; 
LCD_cursor:         TEST      s5, 16              ; test for line 1
                    JUMP      Z, set_line2
                    AND       s5, 15              ; make address in range 80 to 8F for line 1
                    OR        s5, $80
                    CALL      LCD_write_inst      ; instruction write to set cursor
                    RET       
set_line2:          AND       s5, 15              ; make address in range C0 to CF for line 2
                    OR        s5, $C0
                    CALL      LCD_write_inst      ; instruction write to set cursor
                    RET       
; 
; 
; 
; 
; This routine will shift the complete display one position to the left.
; The cursor position and LCD memory contents will not change.
; 
; 
; Registers used s0, s1, s2, s3, s4, s5
; 
LCD_shift_left:     LOAD      s5, 24              ; shift display left
                    CALL      LCD_write_inst
                    RET       
; 
; 
; 
; **************************************************************************************
; Interrupt Service Routine (ISR)
; **************************************************************************************
; 
; The interrupt is used purely to provide a 1 second heart beat binary counter pattern
; on the 8 LEDs.
; 
ISR:                STORE     s0, ISR_preserve_s0 ; preserve register

                    LOAD      s0, 1
                    STORE     s0, semaphore

                    FETCH     s0, ISR_preserve_s0 ; restore register
                    RETI      ENABLE
; 
; 
; **************************************************************************************
; Interrupt Vector
; **************************************************************************************
; 
                    ORG       $3FF
                    JUMP      ISR
; 
;  vim:tw=120:ts=4:expandtab:syntax=psm
